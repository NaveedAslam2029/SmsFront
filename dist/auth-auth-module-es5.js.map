{"version":3,"sources":["node_modules/ng-recaptcha/fesm2015/ng-recaptcha.js","src/app/auth/components/auth.component.html","src/app/auth/components/login/login.component.html","src/app/auth/components/register/register.component.html","src/app/auth/components/request-password/request-password.component.html","src/app/auth/components/reset-password/reset-password.component.html","src/app/auth/auth-routing.module.ts","src/app/auth/auth.module.ts","src/app/auth/components/auth.component.scss","src/app/auth/components/auth.component.ts","src/app/auth/components/login/login.component.ts","src/app/auth/components/register/register.component.scss","src/app/auth/components/register/register.component.ts","src/app/auth/components/request-password/request-password.component.scss","src/app/auth/components/request-password/request-password.component.ts","src/app/auth/components/reset-password/reset-password.component.scss","src/app/auth/components/reset-password/reset-password.component.ts","src/app/auth/services/recaptcha.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Injectable, Inject, PLATFORM_ID, Optional, EventEmitter, Input, HostBinding, Output, Component, ElementRef, NgZone, NgModule, HostListener, Directive, forwardRef } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { of, BehaviorSubject, Subject } from 'rxjs';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\n\nconst RECAPTCHA_LANGUAGE = new InjectionToken('recaptcha-language');\nconst RECAPTCHA_BASE_URL = new InjectionToken('recaptcha-base-url');\nconst RECAPTCHA_NONCE = new InjectionToken('recaptcha-nonce-tag');\nfunction loadScript(renderMode, onLoaded, urlParams, url, nonce) {\n    window.ng2recaptchaloaded = () => {\n        onLoaded(grecaptcha);\n    };\n    const script = document.createElement('script');\n    script.innerHTML = '';\n    const baseUrl = url || 'https://www.google.com/recaptcha/api.js';\n    script.src = `${baseUrl}?render=${renderMode}&onload=ng2recaptchaloaded${urlParams}`;\n    if (nonce) {\n        // tslint:disable-next-line:no-any Remove \"any\" cast once we upgrade Angular to 7 and TypeScript along with it\n        script.nonce = nonce;\n    }\n    script.async = true;\n    script.defer = true;\n    document.head.appendChild(script);\n}\nlet RecaptchaLoaderService = RecaptchaLoaderService_1 = class RecaptchaLoaderService {\n    constructor(\n    // tslint:disable-next-line:no-any\n    platformId, language, baseUrl, nonce) {\n        this.platformId = platformId;\n        this.language = language;\n        this.baseUrl = baseUrl;\n        this.nonce = nonce;\n        this.init();\n        this.ready = isPlatformBrowser(this.platformId) ? RecaptchaLoaderService_1.ready.asObservable() : of();\n    }\n    /** @internal */\n    init() {\n        if (RecaptchaLoaderService_1.ready) {\n            return;\n        }\n        if (isPlatformBrowser(this.platformId)) {\n            const subject = new BehaviorSubject(null);\n            RecaptchaLoaderService_1.ready = subject;\n            const langParam = this.language ? '&hl=' + this.language : '';\n            loadScript('explicit', (grecaptcha) => subject.next(grecaptcha), langParam, this.baseUrl, this.nonce);\n        }\n    }\n};\n/**\n * @internal\n * @nocollapse\n */\nRecaptchaLoaderService.ready = null;\nRecaptchaLoaderService = RecaptchaLoaderService_1 = __decorate([\n    Injectable(),\n    __param(0, Inject(PLATFORM_ID)),\n    __param(1, Optional()), __param(1, Inject(RECAPTCHA_LANGUAGE)),\n    __param(2, Optional()), __param(2, Inject(RECAPTCHA_BASE_URL)),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_NONCE)),\n    __metadata(\"design:paramtypes\", [Object, String, String, String])\n], RecaptchaLoaderService);\nvar RecaptchaLoaderService_1;\n\nconst RECAPTCHA_SETTINGS = new InjectionToken('recaptcha-settings');\n\nlet nextId = 0;\nlet RecaptchaComponent = class RecaptchaComponent {\n    constructor(elementRef, loader, zone, settings) {\n        this.elementRef = elementRef;\n        this.loader = loader;\n        this.zone = zone;\n        this.id = `ngrecaptcha-${nextId++}`;\n        this.resolved = new EventEmitter();\n        if (settings) {\n            this.siteKey = settings.siteKey;\n            this.theme = settings.theme;\n            this.type = settings.type;\n            this.size = settings.size;\n            this.badge = settings.badge;\n        }\n    }\n    ngAfterViewInit() {\n        this.subscription = this.loader.ready.subscribe((grecaptcha) => {\n            if (grecaptcha != null && grecaptcha.render instanceof Function) {\n                this.grecaptcha = grecaptcha;\n                this.renderRecaptcha();\n            }\n        });\n    }\n    ngOnDestroy() {\n        // reset the captcha to ensure it does not leave anything behind\n        // after the component is no longer needed\n        this.grecaptchaReset();\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    /**\n     * Executes the invisible recaptcha.\n     * Does nothing if component's size is not set to \"invisible\".\n     */\n    execute() {\n        if (this.size !== 'invisible') {\n            return;\n        }\n        if (this.widget != null) {\n            this.grecaptcha.execute(this.widget);\n        }\n        else {\n            // delay execution of recaptcha until it actually renders\n            this.executeRequested = true;\n        }\n    }\n    reset() {\n        if (this.widget != null) {\n            if (this.grecaptcha.getResponse(this.widget)) {\n                // Only emit an event in case if something would actually change.\n                // That way we do not trigger \"touching\" of the control if someone does a \"reset\"\n                // on a non-resolved captcha.\n                this.resolved.emit(null);\n            }\n            this.grecaptchaReset();\n        }\n    }\n    /** @internal */\n    expired() {\n        this.resolved.emit(null);\n    }\n    /** @internal */\n    captchaResponseCallback(response) {\n        this.resolved.emit(response);\n    }\n    /** @internal */\n    grecaptchaReset() {\n        if (this.widget != null) {\n            this.zone.runOutsideAngular(() => this.grecaptcha.reset(this.widget));\n        }\n    }\n    /** @internal */\n    renderRecaptcha() {\n        this.widget = this.grecaptcha.render(this.elementRef.nativeElement, {\n            badge: this.badge,\n            callback: (response) => {\n                this.zone.run(() => this.captchaResponseCallback(response));\n            },\n            'expired-callback': () => {\n                this.zone.run(() => this.expired());\n            },\n            sitekey: this.siteKey,\n            size: this.size,\n            tabindex: this.tabIndex,\n            theme: this.theme,\n            type: this.type,\n        });\n        if (this.executeRequested === true) {\n            this.executeRequested = false;\n            this.execute();\n        }\n    }\n};\n__decorate([\n    Input(),\n    HostBinding('attr.id'),\n    __metadata(\"design:type\", Object)\n], RecaptchaComponent.prototype, \"id\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"siteKey\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"type\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"size\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", Number)\n], RecaptchaComponent.prototype, \"tabIndex\", void 0);\n__decorate([\n    Input(),\n    __metadata(\"design:type\", String)\n], RecaptchaComponent.prototype, \"badge\", void 0);\n__decorate([\n    Output(),\n    __metadata(\"design:type\", Object)\n], RecaptchaComponent.prototype, \"resolved\", void 0);\nRecaptchaComponent = __decorate([\n    Component({\n        exportAs: 'reCaptcha',\n        selector: 're-captcha',\n        template: ``\n    }),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_SETTINGS)),\n    __metadata(\"design:paramtypes\", [ElementRef,\n        RecaptchaLoaderService,\n        NgZone, Object])\n], RecaptchaComponent);\n\nlet RecaptchaCommonModule = class RecaptchaCommonModule {\n};\nRecaptchaCommonModule = __decorate([\n    NgModule({\n        declarations: [\n            RecaptchaComponent,\n        ],\n        exports: [\n            RecaptchaComponent,\n        ],\n    })\n], RecaptchaCommonModule);\n\nlet RecaptchaModule = RecaptchaModule_1 = class RecaptchaModule {\n    // We need this to maintain backwards-compatibility with v4. Removing this will be a breaking change\n    static forRoot() {\n        return RecaptchaModule_1;\n    }\n};\nRecaptchaModule = RecaptchaModule_1 = __decorate([\n    NgModule({\n        exports: [\n            RecaptchaComponent,\n        ],\n        imports: [\n            RecaptchaCommonModule,\n        ],\n        providers: [\n            RecaptchaLoaderService,\n        ],\n    })\n], RecaptchaModule);\nvar RecaptchaModule_1;\n\nconst RECAPTCHA_V3_SITE_KEY = new InjectionToken('recaptcha-v3-site-key');\n/**\n * The main service for working with reCAPTCHA v3 APIs.\n *\n * Use the `execute` method for executing a single action, and\n * `onExecute` observable for listening to all actions at once.\n */\nlet ReCaptchaV3Service = class ReCaptchaV3Service {\n    constructor(zone, siteKey, \n    // tslint:disable-next-line:no-any\n    platformId, baseUrl, nonce) {\n        /** @internal */\n        this.onLoadComplete = (grecaptcha) => {\n            this.grecaptcha = grecaptcha;\n            if (this.actionBacklog && this.actionBacklog.length > 0) {\n                this.actionBacklog.forEach(([action, subject]) => this.executeActionWithSubject(action, subject));\n                this.actionBacklog = undefined;\n            }\n        };\n        this.zone = zone;\n        this.isBrowser = isPlatformBrowser(platformId);\n        this.siteKey = siteKey;\n        this.nonce = nonce;\n        this.baseUrl = baseUrl;\n        this.init();\n    }\n    get onExecute() {\n        if (!this.onExecuteSubject) {\n            this.onExecuteSubject = new Subject();\n            this.onExecuteObservable = this.onExecuteSubject.asObservable();\n        }\n        return this.onExecuteObservable;\n    }\n    /**\n     * Executes the provided `action` with reCAPTCHA v3 API.\n     * Use the emitted token value for verification purposes on the backend.\n     *\n     * For more information about reCAPTCHA v3 actions and tokens refer to the official documentation at\n     * https://developers.google.com/recaptcha/docs/v3.\n     *\n     * @param {string} action the action to execute\n     * @returns {Observable<string>} an `Observable` that will emit the reCAPTCHA v3 string `token` value whenever ready.\n     * The returned `Observable` completes immediately after emitting a value.\n     */\n    execute(action) {\n        const subject = new Subject();\n        if (this.isBrowser) {\n            if (!this.grecaptcha) {\n                // todo: add to array of later executions\n                if (!this.actionBacklog) {\n                    this.actionBacklog = [];\n                }\n                this.actionBacklog.push([action, subject]);\n            }\n            else {\n                this.executeActionWithSubject(action, subject);\n            }\n        }\n        return subject.asObservable();\n    }\n    /** @internal */\n    executeActionWithSubject(action, subject) {\n        this.zone.runOutsideAngular(() => {\n            // tslint:disable-next-line:no-any\n            this.grecaptcha.execute(this.siteKey, { action }).then((token) => {\n                this.zone.run(() => {\n                    subject.next(token);\n                    subject.complete();\n                    if (this.onExecuteSubject) {\n                        this.onExecuteSubject.next({ action, token });\n                    }\n                });\n            });\n        });\n    }\n    /** @internal */\n    init() {\n        if (this.isBrowser) {\n            if ('grecaptcha' in window) {\n                this.grecaptcha = grecaptcha;\n            }\n            else {\n                loadScript(this.siteKey, this.onLoadComplete, '', this.baseUrl, this.nonce);\n            }\n        }\n    }\n};\nReCaptchaV3Service = __decorate([\n    Injectable(),\n    __param(1, Inject(RECAPTCHA_V3_SITE_KEY)),\n    __param(2, Inject(PLATFORM_ID)),\n    __param(3, Optional()), __param(3, Inject(RECAPTCHA_BASE_URL)),\n    __param(4, Optional()), __param(4, Inject(RECAPTCHA_NONCE)),\n    __metadata(\"design:paramtypes\", [NgZone, String, Object, String, String])\n], ReCaptchaV3Service);\n\nlet RecaptchaV3Module = class RecaptchaV3Module {\n};\nRecaptchaV3Module = __decorate([\n    NgModule({\n        providers: [\n            ReCaptchaV3Service,\n        ],\n    })\n], RecaptchaV3Module);\n\nlet RecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = class RecaptchaValueAccessorDirective {\n    constructor(host) {\n        this.host = host;\n    }\n    writeValue(value) {\n        if (!value) {\n            this.host.reset();\n        }\n    }\n    registerOnChange(fn) { this.onChange = fn; }\n    registerOnTouched(fn) { this.onTouched = fn; }\n    onResolve($event) {\n        if (this.onChange) {\n            this.onChange($event);\n        }\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n};\n__decorate([\n    HostListener('resolved', ['$event']),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", void 0)\n], RecaptchaValueAccessorDirective.prototype, \"onResolve\", null);\nRecaptchaValueAccessorDirective = RecaptchaValueAccessorDirective_1 = __decorate([\n    Directive({\n        providers: [\n            {\n                multi: true,\n                provide: NG_VALUE_ACCESSOR,\n                // tslint:disable-next-line:no-forward-ref\n                useExisting: forwardRef(() => RecaptchaValueAccessorDirective_1),\n            },\n        ],\n        // tslint:disable-next-line:directive-selector\n        selector: 're-captcha[formControlName],re-captcha[formControl],re-captcha[ngModel]',\n    }),\n    __metadata(\"design:paramtypes\", [RecaptchaComponent])\n], RecaptchaValueAccessorDirective);\nvar RecaptchaValueAccessorDirective_1;\n\nlet RecaptchaFormsModule = class RecaptchaFormsModule {\n};\nRecaptchaFormsModule = __decorate([\n    NgModule({\n        declarations: [\n            RecaptchaValueAccessorDirective,\n        ],\n        exports: [RecaptchaValueAccessorDirective],\n        imports: [FormsModule, RecaptchaCommonModule],\n    })\n], RecaptchaFormsModule);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { RECAPTCHA_BASE_URL, RECAPTCHA_LANGUAGE, RECAPTCHA_NONCE, RECAPTCHA_SETTINGS, RECAPTCHA_V3_SITE_KEY, ReCaptchaV3Service, RecaptchaComponent, RecaptchaFormsModule, RecaptchaLoaderService, RecaptchaModule, RecaptchaV3Module, RecaptchaValueAccessorDirective, RecaptchaCommonModule as ɵa };\n//# sourceMappingURL=ng-recaptcha.js.map\n","export default \"<nb-layout>\\n  <nb-layout-column>\\n    <nb-card>\\n      <nb-card-header>\\n        <nav class=\\\"navigation text-center\\\">\\n          <a href=\\\"JavaScript:void(0);\\\">\\n            <img src=\\\"assets/images/naveed.jpg\\\" height=\\\"40\\\" alt=\\\"\\\">\\n          </a>\\n        </nav>\\n      </nb-card-header>\\n      <nb-card-body>\\n        <nb-auth-block>\\n          <re-captcha #captchaRef=\\\"reCaptcha\\\"\\n              (resolved)=\\\"$event && resolved($event)\\\" \\n              siteKey=\\\"6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI\\\"\\n              size=\\\"invisible\\\" style=\\\"transform:scale(0.7);transform-origin:0;\\\"></re-captcha>\\n          <router-outlet></router-outlet>\\n        </nb-auth-block>\\n      </nb-card-body>\\n    </nb-card>\\n  </nb-layout-column>\\n</nb-layout>\\n\"","export default \"<h1 id=\\\"title\\\" class=\\\"title\\\">Login</h1>\\n<p class=\\\"sub-title\\\">Hello! Log in with your email or phone.</p>\\n\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error.message }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">You have successfully login</li>\\n  </ul>\\n</nb-alert>\\n\\n<form (ngSubmit)=\\\"login()\\\" #form=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-email\\\">Email or Phone</label>\\n    <input nbInput\\n           fullWidth\\n           [(ngModel)]=\\\"user.email\\\"\\n           #email=\\\"ngModel\\\"\\n           name=\\\"email\\\"\\n           id=\\\"input-email\\\"\\n           pattern=\\\".+@.+\\\\..+\\\"\\n           placeholder=\\\"Email or Phone\\\"\\n           autofocus\\n           [status]=\\\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.email.required')\\\"\\n           [attr.aria-invalid]=\\\"email.invalid && email.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"email.invalid && email.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"email.errors?.required\\\">\\n        Field is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"email.errors?.pattern\\\">\\n        Email should be the real one!\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <div class=\\\"form-control-group\\\">\\n    <span class=\\\"label-with-link\\\">\\n      <label class=\\\"label\\\" for=\\\"input-password\\\">Password</label>\\n      <a class=\\\"forgot-password caption-2\\\" routerLink=\\\"../request-password\\\">Forgot Password?</a>\\n    </span>\\n    <input nbInput\\n           fullWidth\\n           [(ngModel)]=\\\"user.password\\\"\\n           #password=\\\"ngModel\\\"\\n           name=\\\"password\\\"\\n           type=\\\"password\\\"\\n           id=\\\"input-password\\\"\\n           pattern=\\\"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[~!@#$%^&*()_+';.,?><:|}{]).{8,}$\\\"\\n           placeholder=\\\"Password\\\"\\n           [status]=\\\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\n           [minlength]=\\\"8\\\"\\n           [maxlength]=\\\"16\\\"\\n           [attr.aria-invalid]=\\\"password.invalid && password.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"password.invalid && password.touched \\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.errors?.required\\\">\\n        Password is required!\\n      </p>\\n      <!-- <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.errors?.minlength || password.errors?.maxlength ||password.invalid\\\">\\n        Password must contain 8 to 16 characters & at least one lowercase and uppercase letter\\n        & one special character\\n      </p> -->\\n    </ng-container>\\n  </div>\\n\\n  <button type=\\\"button\\\"\\n          nbButton\\n          fullWidth\\n          status=\\\"success\\\"\\n          [disabled]=\\\"submitted || !form.valid\\\"\\n          [class.btn-pulse]=\\\"submitted\\\"\\n          (click)=\\\"loginbtnClicked()\\\">\\n    Log In\\n  </button>\\n</form>\\n\\n<section class=\\\"another-action\\\" aria-label=\\\"Register\\\">\\n  Don't have an account? <a class=\\\"text-link\\\" routerLink=\\\"../register\\\">Register</a>\\n</section>\\n\"","export default \"<nb-stepper #stepperRef orientation=\\\"horizontal\\\">\\n   <nb-step label=\\\"Register through\\\">\\n    <h1 id=\\\"title\\\" class=\\\"title\\\">Register through</h1>\\n    <p class=\\\"sub-title\\\">Please select your prefered method of communication.</p>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col-6\\\">\\n      <button nbButton            \\n              fullWidth\\n              status=\\\"primary\\\"\\n              size=\\\"large\\\"\\n              (click)=\\\"useEmailClick()\\\">\\n              Email\\n        </button>\\n      </div>\\n      <div class=\\\"col-6\\\">\\n        <button nbButton\\n                fullWidth\\n                status=\\\"primary\\\"\\n                size=\\\"large\\\"\\n                (click)=\\\"usePhoneClick()\\\">\\n                Phone\\n        </button>\\n      </div>\\n    </div>\\n  </nb-step>\\n  <nb-step label=\\\"Register\\\">\\n\\n    <h1 id=\\\"title\\\" class=\\\"title\\\">Register</h1>\\n\\n    <nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\n      <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\n      <ul class=\\\"alert-message-list\\\">\\n        <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error.message }}</li>\\n      </ul>\\n    </nb-alert>\\n\\n    <nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\n      <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\n      <ul class=\\\"alert-message-list\\\">\\n        <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message.message }}</li>\\n      </ul>\\n    </nb-alert>\\n\\n    <form  #form=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\n\\n      <div class=\\\"form-group row\\\">\\n        <label class=\\\"label col-sm-3 col-form-label\\\" for=\\\"input-name\\\">Full name</label>\\n        <div class=\\\"col-sm-9\\\">\\n          <input nbInput\\n                 [(ngModel)]=\\\"user.fname\\\"\\n                 #fullName=\\\"ngModel\\\"\\n                 id=\\\"input-name\\\"\\n                 name=\\\"fullName\\\"\\n                 placeholder=\\\"Full name\\\"\\n                 autofocus\\n                 fullWidth\\n                 [status]=\\\"fullName.dirty ? (fullName.invalid  ? 'danger' : 'success') : ''\\\"\\n                 [required]=\\\"getConfigValue('forms.validation.fullName.required')\\\"\\n                 [minlength]=\\\"getConfigValue('forms.validation.fullName.minLength')\\\"\\n                 [maxlength]=\\\"getConfigValue('forms.validation.fullName.maxLength')\\\"\\n                 [attr.aria-invalid]=\\\"fullName.invalid && fullName.value ? true : null\\\" />\\n\\n          <ng-container *ngIf=\\\"fullName.invalid && fullName.touched\\\">\\n            <span class=\\\"caption status-danger col\\\" *ngIf=\\\"fullName.errors?.required\\\">\\n              Full name is required!\\n            </span>\\n            <span class=\\\"caption status-danger col\\\" *ngIf=\\\"fullName.errors?.minlength || fullName.errors?.maxlength\\\">\\n              Full name should contains\\n              from {{getConfigValue('forms.validation.fullName.minLength')}}\\n              to {{getConfigValue('forms.validation.fullName.maxLength')}}\\n              characters\\n            </span>\\n          </ng-container>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group row\\\">\\n        <label class=\\\"label col-sm-3 col-form-label\\\" for=\\\"input-pic\\\">Profile picture</label>\\n        <div class=\\\"col-sm-9\\\">\\n          <input nbInput\\n                 [(ngModel)]=\\\"user.image\\\"\\n                 #picture=\\\"ngModel\\\"\\n                 id=\\\"input-pic\\\"\\n                 name=\\\"picture\\\"\\n                 type=\\\"file\\\"\\n                 autofocus\\n                 fullWidth\\n                 accept=\\\".png, .jpg, .jpeg\\\"\\n                 [status]=\\\"picture.dirty ? (picture.invalid  ? 'danger' : 'success') : ''\\\"\\n                 [required]=\\\"getConfigValue('forms.validation.picture.required')\\\"\\n                 [minlength]=\\\"getConfigValue('forms.validation.picture.minLength')\\\"\\n                 [maxlength]=\\\"getConfigValue('forms.validation.picture.maxLength')\\\"\\n                 [attr.aria-invalid]=\\\"picture.invalid && picture.touched ? true : null\\\">\\n\\n          <ng-container *ngIf=\\\"picture.invalid && picture.touched\\\">\\n            <span class=\\\"caption status-danger col\\\" *ngIf=\\\"picture.errors?.required\\\">\\n              Profile picture is required!\\n            </span>\\n          </ng-container>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group row\\\" *ngIf=\\\"useEmail\\\">\\n        <label class=\\\"label col-sm-3 col-form-label\\\" for=\\\"input-email\\\">Email address</label>\\n        <div class=\\\"col-sm-9\\\">\\n          <input nbInput\\n                 [(ngModel)]=\\\"user.email\\\"\\n                 #email=\\\"ngModel\\\"\\n                 id=\\\"input-email\\\"\\n                 name=\\\"email\\\"\\n                 pattern=\\\".+@.+..+\\\"\\n                 placeholder=\\\"Email address\\\"\\n                 fullWidth\\n                 [status]=\\\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\\\"\\n                 [required]=\\\"getConfigValue('forms.validation.email.required')\\\"\\n                 [attr.aria-invalid]=\\\"email.invalid && email.touched ? true : null\\\">\\n\\n          <ng-container *ngIf=\\\"email.invalid && email.touched\\\">\\n            <span class=\\\"caption status-danger col\\\" *ngIf=\\\"email.errors?.required\\\">\\n              Email is required!\\n            </span>\\n            <span class=\\\"caption status-danger col\\\" *ngIf=\\\"email.errors?.pattern\\\">\\n              Email should be the real one!\\n            </span>\\n          </ng-container>\\n        </div>\\n      </div>\\n\\n      <!-- <div class=\\\"form-group row\\\" *ngIf=\\\"!useEmail\\\">\\n        <label class=\\\"label col-sm-3 col-form-label\\\" for=\\\"input-phone\\\">Phone number</label>\\n        <div class=\\\"col-sm-9\\\">\\n          <ngx-intl-tel-input [(ngModel)]=\\\"user.phoneNumber\\\"\\n                              #phone=\\\"ngModel\\\"\\n                              id=\\\"input-phone\\\"\\n                              name=\\\"phone\\\"\\n                              [cssClass]=\\\"'register-input-phone'\\\"\\n                              [enableAutoCountrySelect]=\\\"false\\\"\\n                              [enablePlaceholder]=\\\"true\\\"\\n                              [searchCountryFlag]=\\\"true\\\"\\n                              [searchCountryField]=\\\"[SearchCountryField.Iso2, SearchCountryField.Name]\\\"\\n                              [selectFirstCountry]=\\\"false\\\"\\n                              [selectedCountryISO]=\\\"CountryISO.UnitedStates\\\"\\n                              [maxLength]=\\\"15\\\"\\n                              [tooltipField]=\\\"TooltipLabel.Name\\\"\\n                              [phoneValidation]=\\\"true\\\"\\n                              [separateDialCode]=\\\"true\\\"\\n                              [required]=\\\"true\\\"\\n                              [attr.aria-invalid]=\\\"phone.invalid && phone.touched ? true : null\\\">\\n\\n            <ng-container *ngIf=\\\"phone.invalid && phone.touched\\\">\\n              <span class=\\\"caption status-danger col\\\" *ngIf=\\\"phone.errors?.required\\\">\\n                Phone is required!\\n              </span>\\n              <p class=\\\"caption status-danger col\\\" *ngIf=\\\"!phone.errors?.required\\\">\\n                Phone should be the real one!\\n              </p>\\n            </ng-container>\\n          </ngx-intl-tel-input>\\n        </div>\\n      </div> -->\\n\\n      <div class=\\\"form-group row\\\">\\n        <label class=\\\"label col-sm-3 col-form-label\\\" for=\\\"input-password\\\">Password</label>\\n        <div class=\\\"col-sm-9\\\">\\n          <input nbInput\\n                 [(ngModel)]=\\\"user.password\\\"\\n                 #password=\\\"ngModel\\\"\\n                 type=\\\"password\\\"\\n                 id=\\\"input-password\\\"\\n                 name=\\\"password\\\"\\n                 placeholder=\\\"Password\\\"\\n                 pattern=\\\"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[~!@#$%^&*()_+';.,?><:|}{]).{8,}$\\\"\\n                 fullWidth\\n                 [status]=\\\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\\\"\\n                 [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\n                 [minlength]=\\\"getConfigValue('forms.validation.password.minLength')\\\"\\n                 [maxlength]=\\\"getConfigValue('forms.validation.password.maxLength')\\\"\\n                 [attr.aria-invalid]=\\\"password.invalid && password.touched ? true : null\\\">\\n\\n          <ng-container *ngIf=\\\"password.invalid && password.touched\\\">\\n            <span class=\\\"caption status-danger col\\\" *ngIf=\\\"password.errors?.required\\\">\\n              Password is required!\\n            </span>\\n            <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.errors?.minlength || password.errors?.maxlength ||password.invalid\\\">\\n              Password must contain 8 to 16 characters & at least one lowercase and uppercase letter\\n              & one special character\\n            </p>\\n          </ng-container>\\n        </div> \\n      </div>\\n\\n      <div class=\\\"form-group row\\\">\\n        <label class=\\\"label col-sm-3 col-form-label\\\" for=\\\"input-re-password\\\">Repeat password</label>\\n        <div class=\\\"col-sm-9\\\">\\n          <input nbInput\\n                 [(ngModel)]=\\\"user.password\\\"\\n                 #rePass=\\\"ngModel\\\"\\n                 type=\\\"password\\\"\\n                 id=\\\"input-re-password\\\"\\n                 name=\\\"rePass\\\"\\n                 placeholder=\\\"Confirm Password\\\"\\n                 fullWidth\\n                 [status]=\\\"rePass.dirty ? (rePass.invalid || password.value != rePass.value  ? 'danger' : 'success') : ''\\\"\\n                 [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\n                 [attr.aria-invalid]=\\\"rePass.invalid && rePass.touched ? true : null\\\">\\n\\n          <ng-container *ngIf=\\\"rePass.touched\\\">\\n            <p class=\\\"caption status-danger\\\" *ngIf=\\\"rePass.invalid && rePass.errors?.required\\\">\\n              Password confirmation is required!\\n            </p>\\n            <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.value != rePass.value && !rePass.errors?.required\\\">\\n              Password does not match the confirm password.\\n            </p>\\n          </ng-container>\\n        </div>\\n        \\n      </div>\\n\\n      <button nbButton\\n              fullWidth\\n              status=\\\"primary\\\"\\n              size=\\\"large\\\" \\n              [disabled]=\\\"submitted || !form.valid || password.value != rePass.value || fullName.value == null || fullName.value == ''\\\"\\n              [class.btn-pulse]=\\\"submitted\\\"\\n              (click)=\\\"registerbtnClicked()\\\">\\n        Register\\n      </button>\\n    </form>\\n\\n    <section class=\\\"another-action\\\" aria-label=\\\"Sign in\\\">\\n      Already have an account? <a class=\\\"text-link\\\" routerLink=\\\"../login\\\">Log in</a>\\n    </section>\\n\\n  </nb-step>\\n</nb-stepper>\\n\"","export default \"<h1 id=\\\"title\\\" class=\\\"title\\\">Forgot Password</h1>\\n<p class=\\\"sub-title\\\">Enter your email or phone and we’ll send a code to reset your password</p>\\n\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<form (ngSubmit)=\\\"requestPass()\\\" #requestPassForm=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\n\\n  <div class=\\\"form-control-group\\\">    \\n    <input nbInput\\n           [(ngModel)]=\\\"user.email\\\"\\n           #email=\\\"ngModel\\\"\\n           id=\\\"input-email\\\"\\n           name=\\\"email\\\"\\n           placeholder=\\\"Email address or Phone number\\\"\\n           autofocus\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"email.dirty ? (email.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.email.required')\\\"\\n           [attr.aria-invalid]=\\\"email.invalid && email.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"email.invalid && email.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"email.errors?.required\\\">\\n        Field is required!\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <button nbButton\\n          fullWidth\\n          status=\\\"primary\\\"\\n          size=\\\"large\\\"\\n          [disabled]=\\\"submitted || !requestPassForm.valid\\\"\\n          [class.btn-pulse]=\\\"submitted\\\">\\n    Request password\\n  </button>\\n</form>\\n\\n<section class=\\\"sign-in-or-up\\\" aria-label=\\\"Sign in or sign up\\\">\\n  <p><a class=\\\"text-link\\\" routerLink=\\\"../login\\\">Back to Log In</a></p>\\n  <p><a routerLink=\\\"../register\\\" class=\\\"text-link\\\">Register</a></p>\\n</section>\\n\"","export default \"<h1 id=\\\"title\\\" class=\\\"title\\\">Change password</h1>\\n<p class=\\\"sub-title\\\">Please set a new password</p>\\n\\n<nb-alert *ngIf=\\\"showMessages.error && errors?.length && !submitted\\\" outline=\\\"danger\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Oh snap!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let error of errors\\\" class=\\\"alert-message\\\">{{ error }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<nb-alert *ngIf=\\\"showMessages.success && messages?.length && !submitted\\\" outline=\\\"success\\\" role=\\\"alert\\\">\\n  <p class=\\\"alert-title\\\"><b>Hooray!</b></p>\\n  <ul class=\\\"alert-message-list\\\">\\n    <li *ngFor=\\\"let message of messages\\\" class=\\\"alert-message\\\">{{ message }}</li>\\n  </ul>\\n</nb-alert>\\n\\n<form (ngSubmit)=\\\"resetPass()\\\" #resetPassForm=\\\"ngForm\\\" aria-labelledby=\\\"title\\\">\\n\\n  <div class=\\\"form-control-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-password\\\">New Password</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.password\\\"\\n           #password=\\\"ngModel\\\"\\n           type=\\\"password\\\"\\n           id=\\\"input-password\\\"\\n           name=\\\"password\\\"\\n           class=\\\"first\\\"\\n           placeholder=\\\"New Password\\\"\\n           autofocus\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"password.dirty ? (password.invalid  ? 'danger' : 'success') : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\n           [minlength]=\\\"getConfigValue('forms.validation.password.minLength')\\\"\\n           [maxlength]=\\\"getConfigValue('forms.validation.password.maxLength')\\\"\\n           [attr.aria-invalid]=\\\"password.invalid && password.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"password.invalid && password.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.errors?.required\\\">\\n        Password is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.errors?.minlength || password.errors?.maxlength\\\">\\n        Password should contains\\n        from {{getConfigValue('forms.validation.password.minLength')}}\\n        to {{getConfigValue('forms.validation.password.maxLength')}}\\n        characters\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <div class=\\\"form-group\\\">\\n    <label class=\\\"label\\\" for=\\\"input-re-password\\\">Confirm Password</label>\\n    <input nbInput\\n           [(ngModel)]=\\\"user.confirmPassword\\\"\\n           #rePass=\\\"ngModel\\\"\\n           id=\\\"input-re-password\\\"\\n           name=\\\"rePass\\\"\\n           type=\\\"password\\\"\\n           class=\\\"last\\\"\\n           placeholder=\\\"Confirm Password\\\"\\n           fullWidth\\n           fieldSize=\\\"large\\\"\\n           [status]=\\\"rePass.touched\\n               ? (rePass.invalid || password.value != rePass.value ? 'danger' : 'success')\\n               : ''\\\"\\n           [required]=\\\"getConfigValue('forms.validation.password.required')\\\"\\n           [attr.aria-invalid]=\\\"rePass.invalid && rePass.touched ? true : null\\\">\\n    <ng-container *ngIf=\\\"rePass.touched\\\">\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"rePass.invalid && rePass.errors?.required\\\">\\n        Password confirmation is required!\\n      </p>\\n      <p class=\\\"caption status-danger\\\" *ngIf=\\\"password.value != rePass.value && !rePass.errors?.required\\\">\\n        Password does not match the confirm password.\\n      </p>\\n    </ng-container>\\n  </div>\\n\\n  <button nbButton\\n          status=\\\"primary\\\"\\n          fullWidth\\n          size=\\\"large\\\"\\n          [disabled]=\\\"submitted || !resetPassForm.valid\\\"\\n          [class.btn-pulse]=\\\"submitted\\\">\\n    Change password\\n  </button>\\n</form>\\n\\n<section class=\\\"sign-in-or-up\\\" aria-label=\\\"Sign in or sign up\\\">\\n  <p><a class=\\\"text-link\\\" routerLink=\\\"../login\\\">Back to Log In</a></p>\\n  <p><a class=\\\"text-link\\\" routerLink=\\\"../register\\\">Register</a></p>\\n</section>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { NbLogoutComponent } from '@nebular/auth';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { AuthComponent } from './components/auth.component';\nimport { RequestPasswordComponent } from './components/request-password/request-password.component';\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\n\nexport const routes: Routes = [\n  {\n    path: '',\n    component: AuthComponent,\n    children: [\n      // should we default to login? But it creates problem with links e.g. /auth/request-password becomes only /request-password\n      {\n        path: 'login',\n        component: LoginComponent,\n      },\n      // {\n      //   path: 'login',\n      //   component: LoginComponent,\n      // },\n      {\n        path: 'register',\n        component: RegisterComponent,\n      },\n      {\n        path: 'logout',\n        component: NbLogoutComponent,\n      },\n      {\n        path: 'request-password',\n        component: RequestPasswordComponent,\n      },\n      {\n        path: 'reset-password',\n        component: ResetPasswordComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { NbAuthModule } from '@nebular/auth';\nimport {\n  NbAlertModule,\n  NbInputModule,\n  NbButtonModule,\n  NbCheckboxModule,\n  NbRadioModule,\n  NbCardModule,\n  NbLayoutModule,\n  NbStepperModule,\n} from '@nebular/theme';\n\nimport { ThemeModule } from '../@theme/theme.module';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { AuthComponent } from './components/auth.component';\nimport { RequestPasswordComponent } from './components/request-password/request-password.component';\nimport { ResetPasswordComponent } from './components/reset-password/reset-password.component';\n\nimport { RecaptchaModule } from 'ng-recaptcha';\nimport { RecaptchaService } from './services/recaptcha.service';\nimport { NgxIntlTelInputModule } from 'ngx-intl-tel-input';\n// if you need forms support:\n// import { RecaptchaModule, RecaptchaFormsModule } from 'ng-recaptcha';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    RouterModule,\n    NbAlertModule,\n    NbInputModule,\n    NbButtonModule,\n    NbCheckboxModule,\n    NbRadioModule,\n    NbCardModule,\n    NbLayoutModule,\n    NbStepperModule,\n    AuthRoutingModule,\n    ThemeModule,\n\n    NbAuthModule,\n     RecaptchaModule,\n    NgxIntlTelInputModule,\n  ],\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n    AuthComponent,\n    RequestPasswordComponent,\n    ResetPasswordComponent,\n  ],\n  providers: [\n    RecaptchaService,\n  ],\n})\nexport class AuthModule { }\n","export default \"/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */:host nb-card{margin:0;height:calc(100vh - 2 * 2.5rem)}:host .navigation .link{display:inline-block;text-decoration:none}:host .navigation .link nb-icon{font-size:2rem;vertical-align:middle}:host .links nb-icon{font-size:2.5rem}:host nb-card-body{display:-webkit-box;display:flex;width:100%}:host nb-auth-block{margin:auto}@media (max-width: 767.98px){:host nb-card{border-radius:0;height:100vh}}:host ::ng-deep nb-layout .layout .layout-container .content .columns nb-layout-column{padding:2.5rem}@media (max-width: 767.98px){:host ::ng-deep nb-layout .layout .layout-container .content .columns nb-layout-column{padding:0}}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AbmVidWxhci9hdXRoL2NvbXBvbmVudHMvYXV0aC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0VBSUUsQ0FBQyxjQUFjLFFBQVEsQ0FBQywrQkFBK0IsQ0FBQyx3QkFBd0Isb0JBQW9CLENBQUMsb0JBQW9CLENBQUMsZ0NBQWdDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxxQkFBcUIsZ0JBQWdCLENBQUMsbUJBQW1CLG1CQUFZLENBQVosWUFBWSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsV0FBVyxDQUFDLDZCQUE2QixjQUFjLGVBQWUsQ0FBQyxZQUFZLENBQUMsQ0FBQyx1RkFBdUYsY0FBYyxDQUFDLDZCQUE2Qix1RkFBdUYsU0FBUyxDQUFDIiwiZmlsZSI6InNyYy9hcHAvYXV0aC9jb21wb25lbnRzL2F1dGguY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovOmhvc3QgbmItY2FyZHttYXJnaW46MDtoZWlnaHQ6Y2FsYygxMDB2aCAtIDIgKiAyLjVyZW0pfTpob3N0IC5uYXZpZ2F0aW9uIC5saW5re2Rpc3BsYXk6aW5saW5lLWJsb2NrO3RleHQtZGVjb3JhdGlvbjpub25lfTpob3N0IC5uYXZpZ2F0aW9uIC5saW5rIG5iLWljb257Zm9udC1zaXplOjJyZW07dmVydGljYWwtYWxpZ246bWlkZGxlfTpob3N0IC5saW5rcyBuYi1pY29ue2ZvbnQtc2l6ZToyLjVyZW19Omhvc3QgbmItY2FyZC1ib2R5e2Rpc3BsYXk6ZmxleDt3aWR0aDoxMDAlfTpob3N0IG5iLWF1dGgtYmxvY2t7bWFyZ2luOmF1dG99QG1lZGlhIChtYXgtd2lkdGg6IDc2Ny45OHB4KXs6aG9zdCBuYi1jYXJke2JvcmRlci1yYWRpdXM6MDtoZWlnaHQ6MTAwdmh9fTpob3N0IDo6bmctZGVlcCBuYi1sYXlvdXQgLmxheW91dCAubGF5b3V0LWNvbnRhaW5lciAuY29udGVudCAuY29sdW1ucyBuYi1sYXlvdXQtY29sdW1ue3BhZGRpbmc6Mi41cmVtfUBtZWRpYSAobWF4LXdpZHRoOiA3NjcuOThweCl7Omhvc3QgOjpuZy1kZWVwIG5iLWxheW91dCAubGF5b3V0IC5sYXlvdXQtY29udGFpbmVyIC5jb250ZW50IC5jb2x1bW5zIG5iLWxheW91dC1jb2x1bW57cGFkZGluZzowfX1cbiJdfQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NbAuthComponent, NbAuthService } from '@nebular/auth';\nimport { Location } from '@angular/common';\nimport { RecaptchaService } from '../services/recaptcha.service';\nimport { RecaptchaComponent } from 'ng-recaptcha';\n\n@Component({\n  selector: 'epv-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.scss'],\n})\nexport class AuthComponent extends NbAuthComponent implements OnInit {\n\n  @ViewChild('captchaRef', {static: false}) captchaRef: RecaptchaComponent;\n\n  constructor(protected auth: NbAuthService, protected location: Location, private reacptchaService: RecaptchaService) {\n    super(auth, location);\n    reacptchaService.executeRecaptcha.subscribe(() => {\n      this.captchaRef.execute();\n    });\n  }\n\n  resolved(captchaResponse: string) {\n    this.reacptchaService.recaptchaResolved.next(captchaResponse);\n    this.captchaRef.reset();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import { Component, ChangeDetectorRef, Inject, OnDestroy } from '@angular/core';\nimport { NbLoginComponent, NbAuthService, NB_AUTH_OPTIONS } from '@nebular/auth';\nimport { Router } from '@angular/router';\nimport { RecaptchaService } from '../../services/recaptcha.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'epv-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent extends NbLoginComponent implements OnDestroy {\n  recaptchaResolvedSubscription: Subscription;\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected cd: ChangeDetectorRef,\n              protected router: Router,\n              private recaptchaService: RecaptchaService) {\n\n    super(service, options, cd, router);\n    this.recaptchaResolvedSubscription = recaptchaService.recaptchaResolved.subscribe((captchaResponse: string) => {\n      this.resolved(captchaResponse);\n    });\n  }\n\n  loginbtnClicked(): void {\n    this.recaptchaService.executeRecaptcha.next();\n  }\n\n  resolved(captchaResponse: string) {\n    this.user.googleReCaptchaResponse = captchaResponse;\n    this.login();\n  }\n\n  ngOnDestroy(): void {\n    this.recaptchaResolvedSubscription.unsubscribe();\n  }\n}\n","export default \":host .title{margin-bottom:2rem}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AbmVidWxhci9hdXRoL2NvbXBvbmVudHMvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxhQUFhLGtCQUFrQiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvY29tcG9uZW50cy9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IC50aXRsZXttYXJnaW4tYm90dG9tOjJyZW19XG4iXX0= */\"","import { Component, Inject, ChangeDetectorRef, OnDestroy, ViewChild } from '@angular/core';\nimport { NbRegisterComponent, NbAuthService, NB_AUTH_OPTIONS } from '@nebular/auth';\nimport { Router } from '@angular/router';\nimport { RecaptchaService } from '../../services/recaptcha.service';\nimport { Subscription } from 'rxjs';\nimport { NbStepperComponent } from '@nebular/theme';\n\nimport { SearchCountryField, TooltipLabel, CountryISO } from 'ngx-intl-tel-input';\n\n@Component({\n  selector: 'epv-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n})\nexport class RegisterComponent extends NbRegisterComponent implements OnDestroy {\n  radioGroupValue = 1;\n  recaptchaResolvedSubscription: Subscription;\n  useEmail: boolean = true;\n  @ViewChild('stepperRef', {static: false}) stepperRef: NbStepperComponent;\n  SearchCountryField = SearchCountryField;\n  TooltipLabel = TooltipLabel;\n  CountryISO = CountryISO;\n  // preferredCountries: CountryISO[] = [CountryISO.UnitedStates, CountryISO.UnitedKingdom];\n\n  constructor(protected service: NbAuthService,\n              @Inject(NB_AUTH_OPTIONS) protected options = {},\n              protected cd: ChangeDetectorRef,\n              protected router: Router,\n    private recaptchaService: RecaptchaService) {\n\n    super(service, options, cd, router);\n    this.recaptchaResolvedSubscription = recaptchaService.recaptchaResolved.subscribe((captchaResponse: string) => {\n      this.resolved(captchaResponse);\n    });\n  }\n\n  useEmailClick(): void {\n    this.useEmail = true;\n    this.user.signupBy = \"Email\";\n    this.stepperRef.next();\n  }\n\n  usePhoneClick(): void {\n    this.useEmail = false;\n    this.user.signupBy = \"PhoneNumber\";\n    this.stepperRef.next();\n  }\n\n  resolved(captchaResponse: string) {\n    //  this.user.googleReCaptchaResponse = captchaResponse;\n    if (this.useEmail === false) {\n      this.user.phoneNumber = this.user.phoneNumber.internationalNumber;\n    }\n    this.register();\n  }\n\n  registerbtnClicked(): void {\n    this.recaptchaService.executeRecaptcha.next();\n  }\n\n  ngOnDestroy(): void {\n    this.recaptchaResolvedSubscription.unsubscribe();\n  }\n}\n","export default \":host .form-group:last-of-type{margin-bottom:3rem}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AbmVidWxhci9hdXRoL2NvbXBvbmVudHMvcmVxdWVzdC1wYXNzd29yZC9yZXF1ZXN0LXBhc3N3b3JkLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0JBQStCLGtCQUFrQiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvY29tcG9uZW50cy9yZXF1ZXN0LXBhc3N3b3JkL3JlcXVlc3QtcGFzc3dvcmQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCAuZm9ybS1ncm91cDpsYXN0LW9mLXR5cGV7bWFyZ2luLWJvdHRvbTozcmVtfVxuIl19 */\"","import { Component, OnInit } from '@angular/core';\nimport { NbRequestPasswordComponent } from '@nebular/auth';\n\n@Component({\n  selector: 'epv-request-password',\n  templateUrl: './request-password.component.html',\n  styleUrls: ['./request-password.component.scss'],\n})\nexport class RequestPasswordComponent extends NbRequestPasswordComponent implements OnInit {\n\n  ngOnInit() {\n  }\n\n}\n","export default \":host .form-group:last-of-type{margin-bottom:3rem}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9AbmVidWxhci9hdXRoL2NvbXBvbmVudHMvcmVzZXQtcGFzc3dvcmQvcmVzZXQtcGFzc3dvcmQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwrQkFBK0Isa0JBQWtCIiwiZmlsZSI6InNyYy9hcHAvYXV0aC9jb21wb25lbnRzL3Jlc2V0LXBhc3N3b3JkL3Jlc2V0LXBhc3N3b3JkLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3QgLmZvcm0tZ3JvdXA6bGFzdC1vZi10eXBle21hcmdpbi1ib3R0b206M3JlbX1cbiJdfQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { NbResetPasswordComponent } from '@nebular/auth';\n\n@Component({\n  selector: 'epv-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss'],\n})\nexport class ResetPasswordComponent extends NbResetPasswordComponent implements OnInit {\n\n  ngOnInit() {\n  }\n\n}\n","import { Subject } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RecaptchaService {\n\n  executeRecaptcha = new Subject();\n  recaptchaResolved = new Subject();\n\n}\n"],"sourceRoot":"webpack:///","file":"auth-auth-module-es5.js"}